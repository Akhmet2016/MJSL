/////prompt/////////////////////////////////////////////////////////////////////////

Функция prompt принимает два аргумента:

result = prompt(title, default);
Она выводит модальное окно с заголовком title, полем для ввода текста,
заполненным строкой по умолчанию default и кнопками OK/CANCEL.

Пользователь должен либо что-то ввести и нажать OK, либо отменить ввод кликом на CANCEL
или нажатием Esc на клавиатуре.

Пример: prompt("messag", "go in the club");

/////confirm/////////////////////////////////////////////////////////////////////////

Синтаксис:

result = confirm(question);
confirm выводит окно с вопросом question с двумя кнопками: OK и CANCEL.

Результатом будет true при нажатии OK и false – при CANCEL(Esc).

Например:

 var isAdmin = confirm("Вы - администратор?");

alert( isAdmin );

////////////////////////////////////////////////////////////////////////////////////

outer: for (var i = 0; i < 3; i++) {

  for (var j = 0; j < 3; j++) {

    var input = prompt('Значение в координатах '+i+','+j, '');

    // если отмена ввода или пустая строка -
    // завершить оба цикла
    if (!input) break outer; // (*)

  }
}
alert('Готово!');

////////////////////////new Function/////////////////////////////////////////////

Существует ещё один способ создания функции, который используется очень редко, но упомянем
и его для полноты картины.

Он позволяет создавать функцию полностью «на лету» из строки, вот так:


var sum = new Function('a,b', ' return a+b; ');
var result = sum(1, 2);
alert( result ); // 3


То есть, функция создаётся вызовом new Function(params, code):
params
Параметры функции через запятую в виде строки.
code
Код функции в виде строки.
Таким образом можно конструировать функцию, код которой неизвестен на момент написания
программы, но строка с ним генерируется или подгружается динамически во время её выполнения.

/////////////////////////////BDD – поведенческие тесты кода////////////////////////////////////

Мы рассмотрим методику тестирования, которая входит в BDD – Behavior Driven Development. Подход BDD
давно и с успехом используется во многих проектах.

BDD – это не просто тесты. Это гораздо больше.

Тесты BDD – это три в одном: И тесты, И документация, И примеры использования.

Впрочем, хватит слов. Рассмотрим примеры.

Разработка pow: спецификация
Допустим, мы хотим разработать функцию pow(x, n), которая возводит x в целую степень n, для простоты n?0.

Ещё до разработки мы можем представить себе, что эта функция будет делать, и описать это по методике BDD.

Это описание называется спецификация (или, как говорят в обиходе, «спека») и выглядит так:

describe("pow", function() {

  it("возводит в n-ю степень", function() {
    assert.equal(pow(2, 3), 8);
  });

});
У спецификации есть три основных строительных блока, которые вы видите в примере выше:

describe(название, function() { ... })
Задаёт, что именно мы описываем, используется для группировки «рабочих лошадок» – блоков it. В данном случае
мы описываем функцию pow.

it(название, function() { ... })
В названии блока it человеческим языком описывается, что должна делать функция, далее следует тест, который проверяет это.

assert.equal(value1, value2)
Код внутри it, если реализация верна, должен выполняться без ошибок.

Различные функции вида assert.* используются, чтобы проверить, делает ли pow то, что задумано. Пока что нас интересует
только одна из них – assert.equal, она сравнивает свой первый аргумент со вторым и выдаёт ошибку в случае, когда они не равны.
В данном случае она проверяет, что результат pow(2, 3) равен 8.

Есть и другие виды сравнений и проверок, которые мы увидим далее.

////////////////////////////////////////before/after и beforeEach/afterEach////////////////////////////////////////////////

В каждом блоке describe можно также задать функции before/after, которые будут выполнены до/после запуска тестов,
а также beforeEach/afterEach, которые выполняются до/после каждого it.

Например:

describe("Тест", function() {

  before(function() { alert("Начало тестов"); });
  after(function() { alert("Конец тестов"); });

  beforeEach(function() { alert("Вход в тест"); });
  afterEach(function() { alert("Выход из теста"); });

  it('тест 1', function() { alert('1'); });
  it('тест 2', function() { alert('2'); });

});
Последовательность будет такой:

Начало тестов
Вход в тест
1
Выход из теста
Вход в тест
2
Выход из теста
Конец тестов

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Вот самые востребованные assert-проверки, встроенные в Chai:

assert(value) – проверяет что value является true в логическом контексте.
assert.equal(value1, value2) – проверяет равенство value1 == value2.
assert.strictEqual(value1, value2) – проверяет строгое равенство value1 === value2.
assert.notEqual, assert.notStrictEqual – проверки, обратные двум предыдущим.
assert.isTrue(value) – проверяет, что value === true
assert.isFalse(value) – проверяет, что value === false
…более полный список – в документации